// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Neofilia.Server.Data;

#nullable disable

namespace Neofilia.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Neofilia.Domain.Local", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EventEndsAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("EventStartsAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Locals");
                });

            modelBuilder.Entity("Neofilia.Domain.Table", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("LocalId")
                        .HasColumnType("int");

                    b.Property<int?>("LocalId1")
                        .HasColumnType("int");

                    b.Property<int>("TableNumber")
                        .HasColumnType("int");

                    b.Property<string>("UsersId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocalId");

                    b.HasIndex("LocalId1");

                    b.ToTable("Tables");
                });

            modelBuilder.Entity("Neofilia.Server.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Neofilia.Domain.Local", b =>
                {
                    b.OwnsOne("Neofilia.Domain.Address", "Address", b1 =>
                        {
                            b1.Property<int>("LocalId")
                                .HasColumnType("int");

                            b1.Property<string>("CivilNumber")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("CivilNumber");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("PhoneNumber");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Street");

                            b1.HasKey("LocalId");

                            b1.ToTable("Locals");

                            b1.WithOwner()
                                .HasForeignKey("LocalId");
                        });

                    b.OwnsMany("Neofilia.Domain.Menu", "Menus", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<int>("LocalId")
                                .HasColumnType("int");

                            b1.Property<string>("Url")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("Id", "LocalId");

                            b1.HasIndex("LocalId");

                            b1.ToTable("Menus", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("LocalId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Menus");
                });

            modelBuilder.Entity("Neofilia.Domain.Table", b =>
                {
                    b.HasOne("Neofilia.Domain.Local", null)
                        .WithMany("Tables")
                        .HasForeignKey("LocalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Neofilia.Domain.Local", null)
                        .WithMany("GetTables")
                        .HasForeignKey("LocalId1");

                    b.OwnsOne("Neofilia.Domain.Reward", "Reward", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<int>("TableId")
                                .HasColumnType("int");

                            b1.Property<DateTimeOffset>("GeneratedAt")
                                .HasColumnType("datetimeoffset");

                            b1.Property<bool>("IsRedeemed")
                                .HasColumnType("bit");

                            b1.Property<decimal>("Money")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<DateTimeOffset>("RedeemedAt")
                                .HasColumnType("datetimeoffset");

                            b1.Property<int>("Type")
                                .HasColumnType("int");

                            b1.HasKey("Id", "TableId");

                            b1.HasIndex("TableId")
                                .IsUnique();

                            b1.ToTable("Rewards", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("TableId");
                        });

                    b.Navigation("Reward");
                });

            modelBuilder.Entity("Neofilia.Domain.Local", b =>
                {
                    b.Navigation("GetTables");

                    b.Navigation("Tables");
                });
#pragma warning restore 612, 618
        }
    }
}
