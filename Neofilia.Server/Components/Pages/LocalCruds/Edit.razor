@page "/locals/edit"
@using Microsoft.AspNetCore.Authorization
@using Neofilia.Domain
@using static Neofilia.Domain.Local
@inject ILocalRepository DB
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>LocalModel</h4>
<hr />
@if (LocalModel is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="LocalModel" OnValidSubmit="UpdateLocalModel" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="LocalModel.Id" value="@LocalModel.Id" />
                <div class="mb-3">
                    <label for="email" class="form-label">Email:</label>
                    <InputText id="email" @bind-Value="LocalModel.Email" class="form-control" />
                    <ValidationMessage For="() => LocalModel.Email" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="LocalModel.Name" class="form-control" />
                    <ValidationMessage For="() => LocalModel.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="street" class="form-label">Street:</label>
                    <InputText id="street" @bind-Value="LocalModel.Street" class="form-control" />
                    <ValidationMessage For="() => LocalModel.Street" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="civilnumber" class="form-label">CivilNumber:</label>
                    <InputText id="civilnumber" @bind-Value="LocalModel.CivilNumber" class="form-control" />
                    <ValidationMessage For="() => LocalModel.CivilNumber" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="phonenumber" class="form-label">PhoneNumber:</label>
                    <InputText id="phonenumber" @bind-Value="LocalModel.PhoneNumber" class="form-control" />
                    <ValidationMessage For="() => LocalModel.PhoneNumber" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="eventstartsat" class="form-label">EventStartsAt:</label>
                    <InputDate id="eventstartsat" @bind-Value="LocalModel.EventStartsAt" class="form-control" />
                    <ValidationMessage For="() => LocalModel.EventStartsAt" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="eventendsat" class="form-label">EventEndsAt:</label>
                    <InputDate id="eventendsat" @bind-Value="LocalModel.EventEndsAt" class="form-control" />
                    <ValidationMessage For="() => LocalModel.EventEndsAt" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/locals">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public LocalModel? LocalModel { get; set; }
    public Local? Local { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Local = await DB.GetById(Id);
        LocalModel = Local?.ToModel() ?? null;

        if (LocalModel is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateLocalModel()
    {
        await DB.Update(Id, LocalModel.ToLocal()); //TODO: implement correctly

        NavigationManager.NavigateTo("/locals", true);
    }
   
}
