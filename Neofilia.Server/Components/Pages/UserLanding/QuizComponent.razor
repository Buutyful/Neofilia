@implements IDisposable
@rendermode InteractiveServer
@using System.Timers;
﻿
<style>
    .quiz-container {
        max-width: 600px;
        margin: auto;
        padding: 20px;
        border: 1px solid #ccc;
        border-radius: 8px;
        background-color: #f8f8f8;
    }

    .quiz-option {
        cursor: pointer;
        display: flex;
        align-items: center;
        margin-bottom: 10px;
    }

    .option-box {
        width: 20px;
        height: 20px;
        border: 1px solid #000;
        margin-right: 10px;
    }

    /* Add styles for selected state */
    .quiz-option.selected .option-box {
        background-color: #000;
        /* Add any other styles to indicate selection */
    }


    .user-answers {
        margin-top: 20px;
    }

    ul {
        list-style: none;
        padding: 0;
    }

    li {
        margin-bottom: 8px;
    }
</style>

<div class="quiz-container">
    @if (isRoundActive)
    {
        <div>
            Timer: @roundDuration
        </div>
        <div>
            Question: @currentQuestion.Text
        </div>
        <button @onclick="() => currentAnswer = true">True</button>
        <button @onclick="() => currentAnswer = false">False</button>
        <div>
            Current Answer: @currentAnswer
        </div>
        <div>
            Table Score: @tableScore
        </div>
    }
    else
    {
        <div>
            Not active
        </div>
    }
</div>
@code
{
    //TODO: make this a cascade parameter
    [Parameter]
    public HubConnection HubConnection { get; init; } = null!;
    private QuestionDto currentQuestion = new("blabla", true);
    private int roundDuration = 0;
    private int tableScore = 0;
    private Timer timer = new Timer(1000);
    private ElapsedEventHandler? elapsedEventHandler;
    private bool isRoundActive = false;
    private bool currentAnswer;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //TODO: change this into a client strongly typed hub
            HubConnection.On<QuestionDto>("QuestionChanged", q =>
            {
                currentQuestion = q;
                InvokeAsync(() => StateHasChanged());
            });

            HubConnection.On<int>("RoundStarted", roundDuration =>
            {
                this.roundDuration = roundDuration;
                isRoundActive = true;
                timer.Start();
                InvokeAsync(() => StateHasChanged());
            });

            HubConnection.On("RoundEnded", () =>
            {
                timer.Stop();
                isRoundActive = false;
                InvokeAsync(() => StateHasChanged());
            });

            HubConnection.On<int>("ScoreUpdated", score =>
            {
                //TODO: this will probably have race conditions, and will also get updated for every user to the table, it would be nice having an animation
                tableScore = score;
                InvokeAsync(() => StateHasChanged());
            });

            HubConnection.On("GetAnswers", async () =>
            {
                var ans = currentAnswer == currentQuestion.CorrectAnswer;
                await HubConnection.SendAsync("SendAnswer", ans);

            });

            timer.Elapsed += elapsedEventHandler = (o, e) =>
            {
                if (roundDuration >= 0) roundDuration--;

                InvokeAsync(() => StateHasChanged());
            };
        }
        else
        {

        }
        await base.OnAfterRenderAsync(firstRender);
    }

    public void Dispose()
    {
        if (elapsedEventHandler != null)
        {
            timer.Elapsed -= elapsedEventHandler;
            elapsedEventHandler = null;
        }
        timer.Dispose();
    }

}